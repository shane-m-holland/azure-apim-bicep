# Example GitHub Actions Workflow for Service Repository
# Copy this file to your service repository at: .github/workflows/validate-api.yml
#
# This example demonstrates validation of GENERATED API specifications.
# It shows how to generate specs during validation and test them before deployment.

name: Validate API Configuration

on:
  # Validate on pull requests to catch issues early
  pull_request:
    paths:
      - 'specs/**'
      - 'deployment/**'
      - 'src/**'
      
  # Validate on pushes to feature branches
  push:
    branches-ignore:
      - main
      - develop
    paths:
      - 'specs/**'
      - 'deployment/**'
      
  # Allow manual validation
  workflow_dispatch:
    inputs:
      validate_deployment:
        description: 'Perform deployment validation (dry run)'
        type: boolean
        default: true

env:
  SERVICE_NAME: user-service  # Change this to your service name
  API_CONFIG_PATH: deployment/api-config.yml
  # Note: API specs are generated during build, not committed to repo

jobs:
  # Build and generate API specification for validation
  build-and-generate-spec:
    runs-on: ubuntu-latest
    outputs:
      spec-generated: ${{ steps.generate.outputs.spec-generated }}
      spec-file-name: ${{ steps.generate.outputs.spec-file-name }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup build environment
      run: |
        # Add your build setup here (Node.js, .NET, Java, etc.)
        echo "Setting up build environment..."
        
    - name: Install dependencies
      run: |
        # Add your dependency installation here
        echo "Installing dependencies..."
        
    - name: Generate API specification
      id: generate
      run: |
        echo "üîß Generating API specification for validation..."
        
        # Create output directory
        mkdir -p generated-specs
        
        # Generate spec using same approach as deploy workflow
        # (Copy the generation logic from deploy-api.yml)
        
        # Example: Generate a sample OpenAPI spec
        cat > generated-specs/${{ env.SERVICE_NAME }}.openapi.json << 'EOF'
        {
          "openapi": "3.0.3",
          "info": {
            "title": "${{ env.SERVICE_NAME }} API",
            "version": "1.0.0",
            "description": "Generated API specification for validation"
          },
          "paths": {
            "/health": {
              "get": {
                "summary": "Health check",
                "responses": {
                  "200": {
                    "description": "Service is healthy"
                  }
                }
              }
            },
            "/api/users": {
              "get": {
                "summary": "Get users",
                "responses": {
                  "200": {
                    "description": "List of users"
                  }
                }
              }
            }
          }
        }
        EOF
        
        SPEC_FILE="generated-specs/${{ env.SERVICE_NAME }}.openapi.json"
        if [[ -f "$SPEC_FILE" ]]; then
          echo "‚úÖ API specification generated: $SPEC_FILE"
          echo "spec-generated=true" >> $GITHUB_OUTPUT
          echo "spec-file-name=${{ env.SERVICE_NAME }}.openapi.json" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Failed to generate API specification"
          echo "spec-generated=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
    - name: Upload generated specification
      if: steps.generate.outputs.spec-generated == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: validation-api-specs
        path: generated-specs/
        retention-days: 3  # Short retention for validation
        
  # Validate the generated API specification  
  validate-api-spec:
    needs: [build-and-generate-spec]
    if: needs.build-and-generate-spec.outputs.spec-generated == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Download generated specification
      uses: actions/download-artifact@v4
      with:
        name: validation-api-specs
        path: ./specs
        
    - name: Validate OpenAPI specification
      run: |
        echo "üîç Validating generated OpenAPI specification..."
        
        SPEC_FILE="specs/${{ needs.build-and-generate-spec.outputs.spec-file-name }}"
        
        # Install OpenAPI validator
        npm install -g @apidevtools/swagger-cli
        
        # Validate the OpenAPI spec
        swagger-cli validate "$SPEC_FILE"
        echo "‚úÖ Generated OpenAPI specification is valid"
        
    - name: Generate API documentation preview
      if: github.event_name == 'pull_request'
      continue-on-error: true  # Don't fail validation if docs generation fails
      run: |
        echo "üìö Generating API documentation preview..."
        
        SPEC_FILE="specs/${{ needs.build-and-generate-spec.outputs.spec-file-name }}"
        
        # Generate HTML documentation with Redocly CLI (modern approach)
        if npx @redocly/cli build-docs "$SPEC_FILE" --output api-docs.html 2>/dev/null; then
          echo "‚úÖ API documentation generated with @redocly/cli: api-docs.html"
        else
          echo "‚ö†Ô∏è @redocly/cli failed, trying legacy redoc-cli..."
          # Fallback to legacy redoc-cli if available
          if npx redoc-cli build "$SPEC_FILE" --output api-docs.html 2>/dev/null; then
            echo "‚úÖ API documentation generated with redoc-cli: api-docs.html"
          else
            echo "‚ùå Failed to generate API documentation with both @redocly/cli and redoc-cli"
            echo "Creating placeholder documentation file..."
            cat > api-docs.html << 'EOF'
<!DOCTYPE html>
<html>
<head><title>API Documentation</title></head>
<body>
  <h1>API Documentation</h1>
  <p>Documentation generation failed. Please check the OpenAPI specification.</p>
  <p>Spec file: $SPEC_FILE</p>
</body>
</html>
EOF
            echo "üìÑ Placeholder documentation created: api-docs.html"
          fi
        fi
        
    - name: Upload API documentation
      if: github.event_name == 'pull_request'
      uses: actions/upload-artifact@v4
      continue-on-error: true  # Don't fail if upload fails
      with:
        name: api-documentation-${{ github.event.pull_request.number }}
        path: api-docs.html
        retention-days: 7
        if-no-files-found: warn  # Warn if documentation file not found
        
  # Validate API configuration
  validate-api-config:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Check API configuration exists
      run: |
        if [[ -f "${{ env.API_CONFIG_PATH }}" ]]; then
          echo "‚úÖ API configuration found: ${{ env.API_CONFIG_PATH }}"
        else
          echo "‚ùå API configuration not found: ${{ env.API_CONFIG_PATH }}"
          echo "Available deployment files:"
          find deployment/ -name "*.yml" -o -name "*.yaml" -o -name "*.json" 2>/dev/null | head -10
          exit 1
        fi
        
    - name: Validate YAML syntax
      if: endsWith(env.API_CONFIG_PATH, '.yml') || endsWith(env.API_CONFIG_PATH, '.yaml')
      run: |
        # Install yq (Go version) for YAML validation
        YQ_VERSION="v4.44.3"
        wget -qO /tmp/yq "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64"
        sudo install /tmp/yq /usr/local/bin/yq
        
        # Validate YAML syntax
        yq eval '.' "${{ env.API_CONFIG_PATH }}" > /dev/null
        echo "‚úÖ API configuration YAML syntax is valid"
        
    - name: Validate JSON syntax
      if: endsWith(env.API_CONFIG_PATH, '.json')
      run: |
        # Validate JSON syntax
        jq . "${{ env.API_CONFIG_PATH }}" > /dev/null
        echo "‚úÖ API configuration JSON syntax is valid"
        
    - name: Check required fields
      run: |
        echo "üîç Checking required configuration fields..."
        
        # Check for required fields in the API config
        CONFIG_FILE="${{ env.API_CONFIG_PATH }}"
        MISSING_FIELDS=()
        
        # Function to check field in YAML/JSON
        check_field() {
          local field="$1"
          if [[ "$CONFIG_FILE" == *.json ]]; then
            if ! jq -e ".[0].$field" "$CONFIG_FILE" >/dev/null 2>&1; then
              MISSING_FIELDS+=("$field")
            fi
          else
            if ! yq eval -e ".[0].$field" "$CONFIG_FILE" >/dev/null 2>&1; then
              MISSING_FIELDS+=("$field")
            fi
          fi
        }
        
        # Check required fields
        check_field "apiId"
        check_field "displayName" 
        check_field "path"
        check_field "specPath"
        
        if [[ ${#MISSING_FIELDS[@]} -gt 0 ]]; then
          echo "‚ùå Missing required fields in API configuration:"
          for field in "${MISSING_FIELDS[@]}"; do
            echo "  - $field"
          done
          exit 1
        else
          echo "‚úÖ All required fields present in API configuration"
        fi
        
  # Validate against APIM deployment (dry run with artifacts)
  validate-apim-deployment:
    needs: [build-and-generate-spec, validate-api-spec, validate-api-config]
    if: inputs.validate_deployment != false && needs.build-and-generate-spec.outputs.spec-generated == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: Validate APIM Deployment (Dry Run with Artifacts)
      uses: your-org/azure-apim-bicep/.github/workflows/deploy-api.yml@v1
      with:
        environment: dev  # Use dev environment for validation
        service-name: ${{ env.SERVICE_NAME }}
        api-config-path: ${{ env.API_CONFIG_PATH }}
        config-repo: your-org/infra-config-repo
        deployment-mode: deploy
        dry-run: true  # Important: Only validate, don't actually deploy
        apim-tooling-version: v1
        
        # Use artifact-based specification
        use-spec-artifact: true
        spec-artifact-name: validation-api-specs
        spec-artifact-path: ${{ needs.build-and-generate-spec.outputs.spec-file-name }}
        
      secrets:
        AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
        CONFIG_REPO_TOKEN: ${{ secrets.CONFIG_REPO_TOKEN }}
        
  # Comment on PR with validation results
  comment-on-pr:
    needs: [validate-api-spec, validate-api-config, validate-apim-deployment]
    if: always() && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
    - name: Determine validation status
      id: status
      run: |
        if [[ "${{ needs.validate-api-spec.result }}" == "success" && \
              "${{ needs.validate-api-config.result }}" == "success" && \
              ("${{ needs.validate-apim-deployment.result }}" == "success" || "${{ needs.validate-apim-deployment.result }}" == "skipped") ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=All validations passed! ‚úÖ" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=Some validations failed ‚ùå" >> $GITHUB_OUTPUT
        fi
        
    - name: Comment on PR
      uses: actions/github-script@v7
      with:
        script: |
          const status = '${{ steps.status.outputs.status }}';
          const message = '${{ steps.status.outputs.message }}';
          
          let body = `## üîç API Validation Results\n\n${message}\n\n`;
          body += `### Validation Summary:\n`;
          body += `- **API Specification**: ${{ needs.validate-api-spec.result == 'success' && '‚úÖ Valid' || '‚ùå Failed' }}\n`;
          body += `- **API Configuration**: ${{ needs.validate-api-config.result == 'success' && '‚úÖ Valid' || '‚ùå Failed' }}\n`;
          
          if ('${{ needs.validate-apim-deployment.result }}' !== 'skipped') {
            body += `- **APIM Deployment**: ${{ needs.validate-apim-deployment.result == 'success' && '‚úÖ Valid' || '‚ùå Failed' }}\n`;
          }
          
          body += `\n**Service**: ${{ env.SERVICE_NAME }}\n`;
          body += `**API Spec**: ${{ env.API_SPEC_PATH }}\n`;
          body += `**Config**: ${{ env.API_CONFIG_PATH }}\n`;
          
          if (status === 'success') {
            body += `\nüöÄ **Ready for deployment!** This API configuration will deploy successfully.`;
          } else {
            body += `\nüö® **Issues found!** Please fix the validation errors before merging.`;
          }
          
          body += `\n\n[View workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });