name: Validate Configuration (Reusable)

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment to validate (dev, staging, prod, or "all")'
        required: false
        type: string
        default: 'all'
      config-repo:
        description: 'Repository containing environment configurations'
        type: string
        default: ''
      config-path:
        description: 'Path to config files in config repository'
        type: string
        default: 'environments'
      api-config-path:
        description: 'Path to API configuration file (if validating from service repo)'
        type: string
        default: ''
      api-spec-path:
        description: 'Path to API specification file (if validating from service repo)'
        type: string
        default: ''
      apim-tooling-version:
        description: 'Version/ref of APIM tooling to use'
        type: string
        default: 'main'
      validate-azure-resources:
        description: 'Validate that existing Azure resources are accessible'
        type: boolean
        default: false
      infra-only-validation:
        description: 'Validate only infrastructure components (skip API validation)'
        type: boolean
        default: false
    secrets:
      AZURE_CREDENTIALS:
        description: 'Azure service principal credentials (JSON) - required if validate-azure-resources is true'
        required: false
      CONFIG_REPO_TOKEN:
        description: 'GitHub token for accessing config repository'
        required: false

jobs:
  validate-configuration:
    runs-on: ubuntu-latest

    environment: ${{ inputs.environment }}
    
    # strategy:
    #   matrix:
    #     environment: ${{ inputs.environment == 'all' && fromJson('["dev", "staging", "prod"]') || fromJson(format('["{0}"]', inputs.environment)) }}
    #   fail-fast: false
    
    steps:
    - name: Checkout APIM tooling repository
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository_owner }}/azure-apim-bicep
        ref: ${{ inputs.apim-tooling-version }}
        path: apim-tooling
        
    - name: Checkout config repository
      if: inputs.config-repo != ''
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.config-repo }}
        token: ${{ secrets.CONFIG_REPO_TOKEN || github.token }}
        path: config-repo
        
    - name: Checkout service repository (for API validation)
      if: inputs.api-config-path != '' || inputs.api-spec-path != ''
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository }}
        path: service-repo
        
    - name: Download API specification artifacts (if available)
      if: inputs.api-config-path != '' && inputs.api-spec-path == ''
      uses: actions/download-artifact@v4
      continue-on-error: true  # Don't fail if artifacts don't exist
      with:
        name: api-specs
        path: ./spec-artifacts
        
    - name: Setup Azure CLI
      if: inputs.validate-azure-resources == true
      uses: azure/CLI@v1
      with:
        inlineScript: |
          echo "Azure CLI is available"
          
    - name: Enhanced Debug for Environment and Secrets
      run: |
        echo "=== Environment Debug Information ==="
        echo "Current repository: ${{ github.repository }}"
        echo "Input environment: ${{ inputs.environment }}"
        echo "GitHub environment: ${{ github.environment}}"
        echo "Runner environment: ${{ runner.environment}}"

        echo ""
        echo "=== Secret Accessibility ==="
        if [ -z "${{ secrets.AZURE_CREDENTIALS }}" ];
        then
          echo "‚ùå AZURE_CREDENTIALS secret is empty or not accessible"
        else
          echo "‚úÖ AZURE_CREDENTIALS secret is accessible"
          echo "Secret length: $(echo '${{ secrets.AZURE_CREDENTIALS }}' | wc -c) characters"
        fi

        echo ""
        echo "=== Available Environment Variables ==="
        env | grep -E "(GITHUB|RUNNER)" | sort
        
    - name: Azure Login
      if: inputs.validate-azure-resources == true
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Install required tools
      run: |
        # Install jq for JSON processing
        sudo apt-get update && sudo apt-get install -y jq
        
        # Install yq (Go version) for YAML processing
        YQ_VERSION="v4.44.3"
        wget -qO /tmp/yq "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64"
        sudo install /tmp/yq /usr/local/bin/yq
        
        # Verify yq installation
        echo "Installed yq version:"
        yq --version
        
        # Install xmllint for WSDL validation
        sudo apt-get install -y libxml2-utils
        
        # Install Bicep CLI for template validation
        az bicep install || echo "Bicep installation failed - Azure CLI may not be available"
        
    - name: Setup validation workspace
      working-directory: apim-tooling
      run: |
        echo "üîß Setting up validation workspace for environment: ${{ inputs.environment }}"
        
        # Create environment directory
        mkdir -p environments/${{ inputs.environment }}
        
        # Create specs directory for artifact-based workflows
        mkdir -p specs
        
        # Copy configuration from config repo if specified
        if [[ "${{ inputs.config-repo }}" != "" ]]; then
          CONFIG_FILE="../config-repo/${{ inputs.config-path }}/${{ inputs.environment }}/config.env"
          if [[ -f "$CONFIG_FILE" ]]; then
            cp "$CONFIG_FILE" "environments/${{ inputs.environment }}/config.env"
            echo "‚úÖ Copied config.env from config repository"
          else
            echo "‚ö†Ô∏è Config file not found: $CONFIG_FILE"
            echo "Available environments in config repo:"
            ls -la ../config-repo/${{ inputs.config-path }}/ 2>/dev/null || echo "Config path not found"
            # Don't fail here - the environment might not exist yet
          fi
        fi
        
        # Copy API configuration if specified (for service repo validation)
        if [[ "${{ inputs.api-config-path }}" != "" ]]; then
          API_CONFIG="../service-repo/${{ inputs.api-config-path }}"
          if [[ -f "$API_CONFIG" ]]; then
            cp "$API_CONFIG" "environments/${{ inputs.environment }}/api-config.yml"
            echo "‚úÖ Copied API configuration for validation"
            
            # Copy API specification if specified (traditional approach)
            if [[ "${{ inputs.api-spec-path }}" != "" ]]; then
              API_SPEC="../service-repo/${{ inputs.api-spec-path }}"
              if [[ -f "$API_SPEC" ]]; then
                mkdir -p specs
                SPEC_EXT="${API_SPEC##*.}"
                cp "$API_SPEC" "specs/api-spec.${SPEC_EXT}"
                echo "‚úÖ Copied API specification for validation"
                
                # Update API config to reference the copied spec
                sed -i "s|specPath:.*|specPath: ./specs/api-spec.${SPEC_EXT}|g" \
                  "environments/${{ inputs.environment }}/api-config.yml" || true
              else
                echo "‚ö†Ô∏è API specification not found: $API_SPEC"
              fi
            else
              # Check for artifact-based specifications (artifact-based approach)
              if [[ -d "../spec-artifacts" ]]; then
                echo "üì¶ Found API specification artifacts"
                
                # Copy all specs from artifacts to specs directory
                cp -r ../spec-artifacts/* "specs/" 2>/dev/null || true
                
                SPEC_COUNT=$(find "specs" -name "*.json" -o -name "*.yaml" -o -name "*.yml" | wc -l)
                if [[ $SPEC_COUNT -gt 0 ]]; then
                  echo "‚úÖ Copied $SPEC_COUNT API specification(s) from artifacts"
                  
                  # Find the main spec file and update API config if needed
                  MAIN_SPEC=$(find "specs/" -name "*.openapi.json" -o -name "*.openapi.yaml" -o -name "*.openapi.yml" | head -1)
                  if [[ -n "$MAIN_SPEC" ]]; then
                    RELATIVE_SPEC_PATH="./specs/$(basename "$MAIN_SPEC")"
                    sed -i "s|specPath:.*|specPath: $RELATIVE_SPEC_PATH|g" \
                      "environments/${{ inputs.environment }}/api-config.yml" || true
                    echo "Updated API config to reference: $RELATIVE_SPEC_PATH"
                  fi
                else
                  echo "‚ö†Ô∏è No API specifications found in artifacts"
                fi
              fi
            fi
          else
            echo "‚ö†Ô∏è API configuration not found: $API_CONFIG"
          fi
        fi
        
    - name: Validate Bicep templates
      working-directory: apim-tooling
      run: |
        echo "üîç Validating Bicep templates"
        
        # Validate main template
        if command -v az bicep &> /dev/null; then
          echo "Validating bicep/main.bicep..."
          az bicep build --file bicep/main.bicep --stdout > /dev/null && \
            echo "‚úÖ main.bicep is valid" || echo "‚ùå main.bicep validation failed"
            
          # Validate other templates
          for template in bicep/network/*.bicep bicep/apim/*.bicep bicep/apis/*.bicep; do
            if [[ -f "$template" ]]; then
              echo "Validating $template..."
              az bicep build --file "$template" --stdout > /dev/null && \
                echo "‚úÖ $(basename $template) is valid" || echo "‚ùå $(basename $template) validation failed"
            fi
          done
        else
          echo "‚ö†Ô∏è Bicep CLI not available - skipping Bicep template validation"
        fi
        
    - name: Validate environment configuration
      working-directory: apim-tooling
      run: |
        echo "üîç Validating configuration for environment: ${{ inputs.environment }}"
        chmod +x apim.sh scripts/*.sh
        
        # Debug: Show directory structure and yq version
        echo "=== Debug Information ==="
        echo "Current directory: $(pwd)"
        echo "yq version: $(yq --version)"
        echo "Environment directory contents:"
        ls -la "environments/${{ inputs.environment }}/" 2>/dev/null || echo "Environment directory not found"
        echo "Specs directory contents:"
        ls -la "specs/" 2>/dev/null || echo "Specs directory not found"
        echo "=========================="
        
        # Check if environment directory exists and has config
        if [[ ! -d "environments/${{ inputs.environment }}" ]]; then
          echo "‚ö†Ô∏è Environment directory does not exist: ${{ inputs.environment }}"
          echo "This might be expected if the environment hasn't been set up yet."
          exit 0
        fi
        
        # Run validation if config exists
        if [[ -f "environments/${{ inputs.environment }}/config.env" ]]; then
          echo "Running comprehensive validation..."
          
          # Debug: Check API config if present
          if [[ -f "environments/${{ inputs.environment }}/api-config.yml" ]]; then
            echo "=== API Config Debug ==="
            echo "API config file exists"
            echo "File size: $(stat -c%s "environments/${{ inputs.environment }}/api-config.yml" 2>/dev/null || echo "unknown") bytes"
            echo "First 5 lines:"
            head -5 "environments/${{ inputs.environment }}/api-config.yml" 2>/dev/null || echo "Cannot read file"
            echo "Type detection test:"
            yq eval 'type' "environments/${{ inputs.environment }}/api-config.yml" 2>/dev/null || echo "yq type detection failed"
            echo "======================="
          fi
          
          # Build validation command with infra-only flag if enabled
          VALIDATION_CMD="./apim.sh validate ${{ inputs.environment }}"
          if [[ "${{ inputs.infra-only-validation }}" == "true" ]]; then
            VALIDATION_CMD="$VALIDATION_CMD --infra-only"
            echo "Infrastructure-only validation enabled"
          fi
          
          $VALIDATION_CMD || {
            echo "‚ùå Configuration validation failed for environment: ${{ inputs.environment }}"
            echo "=== Post-failure Debug ==="
            echo "Available files in environment directory:"
            find "environments/${{ inputs.environment }}" -type f 2>/dev/null || echo "No files found"
            echo "Available files in specs directory:"  
            find "specs/" -type f 2>/dev/null || echo "No specs found"
            exit 1
          }
        else
          echo "‚ö†Ô∏è No config.env found for environment: ${{ inputs.environment }}"
          echo "Validation skipped for this environment."
        fi
        
    - name: Validate Azure resources (if enabled)
      if: inputs.validate-azure-resources == true
      working-directory: apim-tooling
      continue-on-error: true
      run: |
        echo "üîç Validating Azure resource accessibility"
        
        # Only validate if config exists
        if [[ -f "environments/${{ inputs.environment }}/config.env" ]]; then
          # Source configuration
          source "environments/${{ inputs.environment }}/config.env"
          
          # Check resource group
          if [[ -n "${RESOURCE_GROUP:-}" ]]; then
            echo "Checking resource group: $RESOURCE_GROUP"
            if az group show --name "$RESOURCE_GROUP" >/dev/null 2>&1; then
              echo "‚úÖ Resource group exists and is accessible"
            else
              echo "‚ö†Ô∏è Resource group not found or not accessible: $RESOURCE_GROUP"
            fi
          fi
          
          # Check APIM instance if it should exist
          if [[ -n "${APIM_NAME:-}" && -n "${RESOURCE_GROUP:-}" ]]; then
            echo "Checking APIM instance: $APIM_NAME"
            if az apim show --name "$APIM_NAME" --resource-group "$RESOURCE_GROUP" >/dev/null 2>&1; then
              echo "‚úÖ APIM instance exists and is accessible"
            else
              echo "‚ö†Ô∏è APIM instance not found: $APIM_NAME (this may be expected for new deployments)"
            fi
          fi
          
          # Check existing network resources if configured
          if [[ "${USE_EXISTING_NSG:-false}" == "true" && -n "${NSG_NAME:-}" ]]; then
            echo "Checking existing NSG: $NSG_NAME"
            NSG_RG="${EXISTING_NSG_RESOURCE_GROUP:-$RESOURCE_GROUP}"
            if az network nsg show --name "$NSG_NAME" --resource-group "$NSG_RG" >/dev/null 2>&1; then
              echo "‚úÖ Existing NSG is accessible"
            else
              echo "‚ùå Existing NSG not accessible: $NSG_NAME in $NSG_RG"
            fi
          fi
          
          if [[ "${USE_EXISTING_VNET:-false}" == "true" && -n "${VNET_NAME:-}" ]]; then
            echo "Checking existing VNet: $VNET_NAME"
            VNET_RG="${EXISTING_VNET_RESOURCE_GROUP:-$RESOURCE_GROUP}"
            if az network vnet show --name "$VNET_NAME" --resource-group "$VNET_RG" >/dev/null 2>&1; then
              echo "‚úÖ Existing VNet is accessible"
            else
              echo "‚ùå Existing VNet not accessible: $VNET_NAME in $VNET_RG"
            fi
          fi
        else
          echo "‚ö†Ô∏è No configuration found - skipping Azure resource validation"
        fi
        
    - name: Generate validation report
      if: always()
      working-directory: apim-tooling
      run: |
        echo "## üîç Validation Report - ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "**Mode:** ${{ inputs.infra-only-validation == true && 'Infrastructure-only' || 'Full (Infrastructure + APIs)' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check what was validated
        VALIDATED_ITEMS=()
        
        if [[ -f "environments/${{ inputs.environment }}/config.env" ]]; then
          VALIDATED_ITEMS+=("‚úÖ Environment configuration")
        else
          VALIDATED_ITEMS+=("‚ö†Ô∏è Environment configuration (not found)")
        fi
        
        if [[ "${{ inputs.infra-only-validation }}" == "true" ]]; then
          VALIDATED_ITEMS+=("‚ÑπÔ∏è API configuration (skipped in infrastructure-only mode)")
        elif [[ -f "environments/${{ inputs.environment }}/api-config.yml" ]]; then
          VALIDATED_ITEMS+=("‚úÖ API configuration")
        fi
        
        if command -v az bicep &> /dev/null; then
          VALIDATED_ITEMS+=("‚úÖ Bicep templates")
        else
          VALIDATED_ITEMS+=("‚ö†Ô∏è Bicep templates (CLI not available)")
        fi
        
        if [[ "${{ inputs.validate-azure-resources }}" == "true" ]]; then
          VALIDATED_ITEMS+=("‚úÖ Azure resources accessibility")
        fi
        
        echo "**Validated Items:**" >> $GITHUB_STEP_SUMMARY
        for item in "${VALIDATED_ITEMS[@]}"; do
          echo "- $item" >> $GITHUB_STEP_SUMMARY
        done
        
        if [[ "${{ job.status }}" == "success" ]]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **All validations passed**" >> $GITHUB_STEP_SUMMARY
        else
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚ùå **Some validations failed - check logs for details**" >> $GITHUB_STEP_SUMMARY
        fi