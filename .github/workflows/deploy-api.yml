name: Deploy API to APIM (Reusable)

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy to (dev, staging, prod)'
        required: true
        type: string
      service-name:
        description: 'Name of the service/API being deployed'
        required: true
        type: string
      api-config-path:
        description: 'Path to API configuration file in service repository'
        type: string
        default: 'deployment/api-config.yml'
      api-spec-path:
        description: 'Path to API specification file in service repository'  
        type: string
        default: 'specs/api.openapi.yml'
      config-repo:
        description: 'Repository containing environment configurations'
        type: string
        default: ''
      config-path:
        description: 'Path to config files in config repository'
        type: string
        default: 'environments'
      apim-tooling-version:
        description: 'Version/ref of APIM tooling to use'
        type: string
        default: 'main'
      deployment-mode:
        description: 'Deployment mode (deploy, sync)'
        type: string
        default: 'sync'
      parallel-deployment:
        description: 'Deploy APIs in parallel'
        type: boolean
        default: true
      dry-run:
        description: 'Perform dry run only'
        type: boolean
        default: false
      use-spec-artifact:
        description: 'Use artifact instead of repository file for API specification'
        type: boolean
        default: false
      spec-artifact-name:
        description: 'Name of the artifact containing API specification'
        type: string
        default: 'api-specs'
      spec-artifact-path:
        description: 'Path within artifact to the specification file'
        type: string
        default: ''
      build-workflow-run-id:
        description: 'Run ID of workflow that generated the spec artifact (optional, uses current run if not specified)'
        type: string
        default: ''
    secrets:
      AZURE_CREDENTIALS:
        description: 'Azure service principal credentials (JSON)'
        required: true
      # CONFIG_REPO_TOKEN:
      #   description: 'GitHub token for accessing config repository'
      #   required: false

jobs:
  deploy-api:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    steps:
    - name: Checkout APIM tooling repository
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository_owner }}/azure-apim-bicep
        ref: ${{ inputs.apim-tooling-version }}
        path: apim-tooling
        
    - name: Checkout config repository
      if: inputs.config-repo != ''
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.config-repo }}
        token: ${{ secrets.CONFIG_REPO_TOKEN || github.token }}
        path: config-repo
        
    - name: Checkout service repository
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository }}
        ref: ${{ github.sha }}
        path: service-repo
        
    - name: Download API specification artifact
      if: inputs.use-spec-artifact == true
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.spec-artifact-name }}
        path: ./spec-artifact
        run-id: ${{ inputs.build-workflow-run-id != '' && inputs.build-workflow-run-id || github.run_id }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Azure CLI
      uses: azure/CLI@v1
      with:
        inlineScript: |
          echo "Azure CLI is available"
        
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Install required tools
      run: |
        # Install jq for JSON processing
        sudo apt-get update && sudo apt-get install -y jq
        
        # Install yq (Go version) for YAML processing
        YQ_VERSION="v4.44.3"
        wget -qO /tmp/yq "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64"
        sudo install /tmp/yq /usr/local/bin/yq
        
        # Verify yq installation
        echo "Installed yq version:"
        yq --version
        
        # Install xmllint for WSDL validation
        sudo apt-get install -y libxml2-utils
        
    - name: Setup deployment workspace
      working-directory: apim-tooling
      run: |
        echo "üîß Setting up deployment workspace for service: ${{ inputs.service-name }}"
        
        # Create environment directory
        mkdir -p environments/${{ inputs.environment }}
        mkdir -p specs
        
        # Copy configuration from config repo if specified
        if [[ "${{ inputs.config-repo }}" != "" ]]; then
          CONFIG_FILE="../config-repo/${{ inputs.config-path }}/${{ inputs.environment }}/config.env"
          if [[ -f "$CONFIG_FILE" ]]; then
            cp "$CONFIG_FILE" "environments/${{ inputs.environment }}/config.env"
            echo "‚úÖ Copied config.env from config repository"
          else
            echo "‚ö†Ô∏è Config file not found: $CONFIG_FILE"
            echo "Available environments in config repo:"
            ls -la ../config-repo/${{ inputs.config-path }}/ 2>/dev/null || echo "Config path not found"
            # Don't fail here - the environment might not exist yet
          fi
        fi
        
        # Copy API configuration if specified (for service repo validation)
        if [[ "${{ inputs.api-config-path }}" != "" ]]; then
          API_CONFIG="../service-repo/${{ inputs.api-config-path }}"
          if [[ -f "$API_CONFIG" ]]; then
            cp "$API_CONFIG" "environments/${{ inputs.environment }}/api-config.yml"
            echo "‚úÖ Copied API configuration for validation"
            
            # Copy API specification if specified (traditional approach)
            if [[ "${{ inputs.api-spec-path }}" != "" ]]; then
              API_SPEC="../service-repo/${{ inputs.api-spec-path }}"
              if [[ -f "$API_SPEC" ]]; then
                mkdir -p specs
                SPEC_EXT="${API_SPEC##*.}"
                cp "$API_SPEC" "specs/api-spec.${SPEC_EXT}"
                echo "‚úÖ Copied API specification for validation"
                
                # Update API config to reference the copied spec
                sed -i "s|specPath:.*|specPath: ./specs/api-spec.${SPEC_EXT}|g" \
                  "environments/${{ inputs.environment }}/api-config.yml" || true
              else
                echo "‚ö†Ô∏è API specification not found: $API_SPEC"
              fi
            else
              # Check for artifact-based specifications (artifact-based approach)
              if [[ -d "../spec-artifacts" ]]; then
                echo "üì¶ Found API specification artifacts"
                
                # Copy all specs from artifacts to specs directory
                cp -r ../spec-artifacts/* "specs/" 2>/dev/null || true
                
                SPEC_COUNT=$(find "specs" -name "*.json" -o -name "*.yaml" -o -name "*.yml" | wc -l)
                if [[ $SPEC_COUNT -gt 0 ]]; then
                  echo "‚úÖ Copied $SPEC_COUNT API specification(s) from artifacts"
                  
                  # Find the main spec file and update API config if needed
                  MAIN_SPEC=$(find "specs/" -name "*.openapi.json" -o -name "*.openapi.yaml" -o -name "*.openapi.yml" | head -1)
                  if [[ -n "$MAIN_SPEC" ]]; then
                    RELATIVE_SPEC_PATH="./specs/$(basename "$MAIN_SPEC")"
                    sed -i "s|specPath:.*|specPath: $RELATIVE_SPEC_PATH|g" \
                      "environments/${{ inputs.environment }}/api-config.yml" || true
                    echo "Updated API config to reference: $RELATIVE_SPEC_PATH"
                  fi
                else
                  echo "‚ö†Ô∏è No API specifications found in artifacts"
                fi
              fi
            fi
          else
            echo "‚ö†Ô∏è API configuration not found: $API_CONFIG"
          fi
        fi
    - name: Validate deployment configuration
      working-directory: apim-tooling
      run: |
        echo "üîç Validating deployment configuration"
        chmod +x apim.sh scripts/*.sh
        
        # Validate environment and API configuration
        ./apim.sh validate ${{ inputs.environment }}
        
        # Display configuration summary
        echo ""
        echo "üìã Deployment Configuration Summary:"
        echo "Environment: ${{ inputs.environment }}"
        echo "Service: ${{ inputs.service-name }}"
        echo "Deployment Mode: ${{ inputs.deployment-mode }}"
        echo "Parallel Deployment: ${{ inputs.parallel-deployment }}"
        echo "Dry Run: ${{ inputs.dry-run }}"
        echo "Spec Source: ${{ inputs.use-spec-artifact == true && 'Artifact' || 'Repository' }}"
        if [[ "${{ inputs.use-spec-artifact }}" == "true" ]]; then
          echo "Artifact Name: ${{ inputs.spec-artifact-name }}"
          if [[ -n "${{ inputs.spec-artifact-path }}" ]]; then
            echo "Artifact Path: ${{ inputs.spec-artifact-path }}"
          fi
        else
          echo "Repository Path: ${{ inputs.api-spec-path }}"
        fi
        echo ""
        
    - name: Check API changes (for sync mode)
      if: inputs.deployment-mode == 'sync'
      working-directory: apim-tooling
      run: |
        echo "üîÑ Checking for API changes (sync mode)"
        # The sync command will automatically detect changes
        echo "Sync mode will deploy only changed APIs"
        
    - name: Deploy APIs (dry run)
      if: inputs.dry-run == true
      working-directory: apim-tooling
      run: |
        echo "üß™ Performing dry run API deployment"
        
        DEPLOY_CMD="./apim.sh deploy apis ${{ inputs.environment }} --dry-run"
        
        if [[ "${{ inputs.parallel-deployment }}" == "true" ]]; then
          DEPLOY_CMD="$DEPLOY_CMD --parallel"
        fi
        
        DEPLOY_CMD="$DEPLOY_CMD --verbose"
        
        echo "Executing: $DEPLOY_CMD"
        $DEPLOY_CMD
        
    - name: Deploy APIs  
      if: inputs.dry-run == false && inputs.deployment-mode == 'deploy'
      working-directory: apim-tooling
      run: |
        echo "üöÄ Deploying APIs to environment: ${{ inputs.environment }}"
        
        DEPLOY_CMD="./apim.sh deploy apis ${{ inputs.environment }}"
        
        if [[ "${{ inputs.parallel-deployment }}" == "true" ]]; then
          DEPLOY_CMD="$DEPLOY_CMD --parallel"
        fi
        
        DEPLOY_CMD="$DEPLOY_CMD --verbose"
        
        echo "Executing: $DEPLOY_CMD"
        $DEPLOY_CMD
        
    - name: Sync APIs (intelligent deployment)
      if: inputs.dry-run == false && inputs.deployment-mode == 'sync'
      working-directory: apim-tooling
      run: |
        echo "üîÑ Syncing APIs to environment: ${{ inputs.environment }}"
        
        SYNC_CMD="./apim.sh sync ${{ inputs.environment }} --debug"
        
        echo "Executing: $SYNC_CMD"
        $SYNC_CMD
        
    - name: Validate deployed APIs
      if: inputs.dry-run == false
      working-directory: apim-tooling
      run: |
        echo "‚úÖ Validating deployed APIs"
        
        # Source the environment config to get APIM details
        source "environments/${{ inputs.environment }}/config.env"
        
        # Check if APIs are accessible
        echo "Checking APIM instance: $APIM_NAME in resource group: $RESOURCE_GROUP"
        
        # List deployed APIs
        az apim api list \
          --service-name "$APIM_NAME" \
          --resource-group "$RESOURCE_GROUP" \
          --query '[].{Name:displayName, Path:path, Id:name}' \
          --output table || echo "‚ö†Ô∏è Could not retrieve API list"
          
    - name: Upload deployment artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: api-deployment-logs-${{ inputs.service-name }}-${{ inputs.environment }}-${{ github.run_number }}
        path: |
          apim-tooling/environments/${{ inputs.environment }}/api-config.yml
          apim-tooling/specs/${{ inputs.environment }}/
        retention-days: 30
        
    - name: Post-deployment summary
      if: always()
      run: |
        echo "## üöÄ API Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "**Service:** ${{ inputs.service-name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "**Deployment Mode:** ${{ inputs.deployment-mode }}" >> $GITHUB_STEP_SUMMARY
        echo "**Spec Source:** ${{ inputs.use-spec-artifact == true && 'Artifact' || 'Repository' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Dry Run:** ${{ inputs.dry-run }}" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ job.status }}" == "success" ]]; then
          if [[ "${{ inputs.dry-run }}" == "true" ]]; then
            echo "‚úÖ **Result:** Dry run validation completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ **Result:** API deployed successfully to APIM" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "‚ùå **Result:** API deployment failed - check logs for details" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Service Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY